# Dissertation, visualization of camera trap 2023 data across Gosforth Nature Reserve
# Spatial distribution, diel activity and frequency for all years of GNR data (2021, 2022, 2023)
# Code inteded for use in R, version 12.1+402.

# 1.1 - Installing and loading essential packages
install.packages(c("here", "activity", "lubridate", "tidyverse", "camtrapR", "corrplot", "unmarked", "iNEXT", "behaviouR", "ggpubr", "dplyr"))
library(here)
library(activity)
library(lubridate)
library(tidyverse)
library(camtrapR)
library(corrplot)
library(unmarked)
library(iNEXT)
library(ggpubr)
library(dplyr)
library(camtrapR)
library(behaviouR)
library(bio2020)
library(sf)

# 1.2 - Reading in data from each year and merging together.
specdat2021 <- read.csv(here("speciessequences21.csv"))
camdat2021 <- read.csv(here( "cameradeployments21.csv"))

specdat2022 <- read.csv(here("speciessequences22.csv"))
camdat2022 <- read.csv(here( "cameradeployments22.csv"))

specdat2023 <- read.csv(here("speciessequences23.csv"))
camdat2023 <- read.csv(here( "cameradeployments23.csv"))

join_dat2021 <- merge(specdat2021, camdat2021)

join_dat2022 <- merge(specdat2022, camdat2022)

join_dat2023 <- merge(specdat2023, camdat2023)

# 1.3 - Filtering data to only include Gosforth data.
join_dat2021 <- join_dat2021%>%
  filter(subproject_name %in% c("UK_Forest_suburban_21"))

join_dat2022 <- join_dat2022%>%
  filter(subproject_name %in% c("GB_Forest_GosforthReserve_22"))

join_dat2023 <- join_dat2023%>%
  filter(subproject_name %in% c("GB_Forest_GosforthReserve_23"))

# 1.4 - Filtering data for each year to only include relevant columns.
join_dat2021 <- join_dat2021 %>%
  dplyr::select(longitude, latitude, sequence_id, deployment_id, start_time, end_time,
                camera_functioning, subproject_name, class:group_size) %>%
  filter(common_name %in% c("European Roe Deer", "Eurasian Badger", "Red Fox"))

join_dat2022 <- join_dat2022 %>%
  dplyr::select(longitude, latitude, sequence_id, deployment_id, start_time, end_time,
                camera_functioning, subproject_name, class:group_size) %>%
  filter(common_name %in% c("European Roe Deer", "Eurasian Badger", "Red Fox"))

join_dat2023 <- join_dat2023 %>%
  dplyr::select(longitude, latitude, sequence_id, deployment_id, start_time, end_time,
                camera_functioning, subproject_name, class:group_size) %>%
  filter(common_name %in% c("European Roe Deer", "Eurasian Badger", "Red Fox"))

# Joining all years of data together. 
Totaldata <- rbind(join_dat2021, join_dat2022, join_dat2023)

# 1.5 - Diel Activity for each RD, RF and EB.
# Filter data for European Roe Deer
RDTotal <- Totaldata %>%
  filter(common_name == "European Roe Deer")

# Varied start_time formats so ensuring both are read
RDdate_formats <- c("%Y-%m-%d %H:%M:%S", "%d/%m/%Y %H:%M")

RDTotal$start_time <- parse_date_time(RDTotal$start_time, orders = RDdate_formats) 

RDTotal <- RDTotal %>%
  mutate(Hour = hour(start_time)) %>%
  mutate(Hour = ifelse(Hour == 24 | (Hour >= 0 & Hour < 1), 0, Hour)) 

# Plotting total Diel Activity for European Roe Deer
activityHistogram(RDTotal,
                  allSpecies = TRUE,
                  speciesCol = "common_name",
                  recordDateTimeCol = "start_time",
                  plotR = TRUE,
                  writePNG = FALSE,
                  createDir = FALSE)

# Fixing Activity histogram, creating secondary histogram to ensure that frequencies between
# 00:00-01:00 and 23:00 and 00:00 are seperate.
# Resize plot to ensure x axis are clearly defined.
RDTotal$Hour <- hour(RDTotal$start_time)

hist(RDTotal$Hour, 
     breaks = seq(-0.01, 24.5, by = 1),
     xlab = "Time of day (hr)", 
     xlim = c(-0.5, 24.0001),
     ylim = c(0, 100),
     main = "Activity for European Roe Deer") +
  axis(side = 1, at = seq(0, 24, by = 1))

# Finding out exact frequency values
RDhour_of_day <- hour(RDTotal$start_time)

# Calculate frequency of occurrences for each hour
RDhourly_frequency <- table(RDhour_of_day)

# Print the frequency for each hour
print(RDhourly_frequency)

# Filter data for Eurasian Badger
EBTotal <- Totaldata %>%
  filter(common_name == "Eurasian Badger")

# Varied start_time formats so ensuring both are read
EBdate_formats <- c("%Y-%m-%d %H:%M:%S", "%d/%m/%Y %H:%M")

EBTotal$start_time <- parse_date_time(EBTotal$start_time, orders = EBdate_formats)

# Plotting total Diel Activity for Eurasian Badger
activityHistogram(EBTotal,
                  allSpecies = TRUE,
                  speciesCol = "common_name",
                  recordDateTimeCol = "start_time",
                  #recordDateTimeFormat = "%d/%m/%Y",
                  plotR = TRUE,
                  writePNG = FALSE,
                  createDir = FALSE)

# Secondary histogram for Eurasian Badger.
EBTotal$Hour <- hour(EBTotal$start_time)

hist(EBTotal$Hour, 
     breaks = seq(-0.01, 24.5, by = 1),
     xlab = "Hour", 
     xlim = c(-0.5, 24.0001),
     ylim = c(0, 35),
     main = "Activity for Eurasian Badger")+
  axis(side = 1, at = seq(0, 24, by = 1))

# Finding out exact frequency values
EBhour_of_day <- hour(EBTotal$start_time)

# Calculate frequency of occurrences for each hour
EBhourly_frequency <- table(EBhour_of_day)

# Print the frequency for each hour
print(EBhourly_frequency)

# Filter data for Red Fox
RFTotal <- Totaldata %>%
  filter(common_name == "Red Fox")

# Varied start_time formats so ensuring both are read
RFdate_formats <- c("%Y-%m-%d %H:%M:%S", "%d/%m/%Y %H:%M")

RFTotal$start_time <- parse_date_time(RFTotal$start_time, orders = RFdate_formats)

# Plotting total Diel Activity for Red Fox
activityHistogram(RFTotal,
                  allSpecies = TRUE,
                  speciesCol = "common_name",
                  recordDateTimeCol = "start_time",
                  #recordDateTimeFormat = "%d/%m/%Y",
                  plotR = TRUE,
                  writePNG = FALSE,
                  createDir = FALSE)

# Secondary histogram for Red Fox.
RFTotal$Hour <- hour(RFTotal$start_time)

hist(RFTotal$Hour, 
     breaks = seq(-0.01, 24.5, by = 1),
     xlab = "Hour", 
     xlim = c(-0.5, 24.0001),
     ylim = c(0, 45),
     main = "Activity for Red Fox")+
  axis(side = 1, at = seq(0, 24, by = 1))

# Finding out exact frequency values
RFhour_of_day <- hour(RFTotal$start_time)

# Calculate frequency of occurrences for each hour
RFhourly_frequency <- table(RFhour_of_day)

# Print the frequency for each hour
print(RFhourly_frequency)

# 1.6 Statistical analysis of Diel Activity (paired t test)

# Between European Roe Deer and Eurasian Badger
DielFreqRDEB<- data.frame(
  FreqEB = c(10, 14, 17, 11, 8, 11, 20, 3, 3, 2, 0, 2, 1, 1, 2, 5, 18, 34, 14, 7, 6, 3, 0, 0),
  FreqRD = c(24, 20, 37, 35, 30, 42, 30, 87, 76, 68, 66, 41, 37, 52, 32, 38, 54, 86, 59, 48, 35, 31, 36, 32)
)
# Create means
mean_EB <- mean(DielFreqRDEB$FreqEB)
mean_RD <- mean(DielFreqRDEB$FreqRD)

# Perform t test and print results
t_test_result1 <- t.test(DielFreqRDEB$FreqEB, DielFreqRDEB$FreqRD, paired = TRUE)
print(t_test_result1)

# Between European Roe Deer and Red Fox
DielFreqRDRF<- data.frame(
  FreqRF = c(22, 20, 14, 10, 16, 12, 29, 15, 6, 4, 5, 3, 3, 1, 3, 6, 4, 10, 28, 43, 27, 14, 17, 22),
  FreqRD = c(24, 20, 37, 35, 30, 42, 30, 87, 76, 68, 66, 41, 37, 52, 32, 38, 54, 86, 59, 48, 35, 31, 36, 32)
)
# Create means
mean_RF <- mean(DielFreqRDRF$FreqRF)
mean_RD <- mean(DielFreqRDRF$FreqRD)

# Perform t test and print results
t_test_result2 <- t.test(DielFreqRDRF$FreqRF, DielFreqRDRF$FreqRD, paired = TRUE)
print(t_test_result2)

# Between Eurasian Badger and Red Fox
DielFreqEBRF<- data.frame(
  FreqRF = c(22, 20, 14, 10, 16, 12, 29, 15, 6, 4, 5, 3, 3, 1, 3, 6, 4, 10, 28, 43, 27, 14, 17, 22),
  FreqEB = c(10, 14, 17, 11, 8, 11, 20, 3, 3, 2, 0, 2, 1, 1, 2, 5, 18, 34, 14, 7, 6, 3, 0, 0)
)
# Create means
mean_RF <- mean(DielFreqEBRF$FreqRF)
mean_EB <- mean(DielFreqEBRF$FreqEB)

# Perform t test and print results
t_test_result3 <- t.test(DielFreqEBRF$FreqEB, DielFreqEBRF$FreqRF, paired = TRUE)
print(t_test_result3)

# 1.7 - Plotting frequency for species of interest (Roe Deer, Eurasian Badger, and Red Fox) at each camera station
# Creating a total count column for each species for the year of capture
TotalCount <- Totaldata %>% 
  group_by(common_name) %>%
  summarise(n = n())

RedTotalData <- Totaldata %>%
  semi_join(TotalCount, by = c("common_name"))

# Creating total frequency grouped by species and year of capture
TFreqPlot <- RedTotalData %>%
  group_by(deployment_id, common_name) %>%
  summarise(n = n())

# Plot modifications
custom_labels <- c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19")
bar_width <- 0.9
group_gap_width <- 1.2

# Ordering species
species_order <- c("European Roe Deer", "Eurasian Badger", "Red Fox")
TFreqPlot$common_name <- factor(TFreqPlot$common_name, levels = species_order)

# Creating a mapping of deployment IDs to Camera_Site numbers
CameraNumber <- c(
  "GB_Forest_GosforthReserve_22_loc_01 09/29/2022" = "1",
  "GB_Forest_GosforthReserve_23_loc_01" = "1",
  "UK_Forest_Suburban_21_loc_01 09/28/2021" = "1",
  "GB_Forest_GosforthReserve_22_loc_02 09/29/2022" = "2",
  "GB_Forest_GosforthReserve_23_loc_02" = "2",
  "GB_Forest_GosforthReserve_22_loc_03 09/29/2022" = "3",
  "GB_Forest_GosforthReserve_23_loc_03" = "3",
  "UK_Forest_Suburban_21_loc_03 09/29/2021" = "3",
  "GB_Forest_GosforthReserve_22_loc_04 09/29/2022" = "4",
  "GB_Forest_GosforthReserve_23_loc_04" = "4",
  "UK_Forest_Suburban_21_loc_04 09/28/2021" = "4",
  "GB_Forest_GosforthReserve_23_loc_05" = "5",
  "UK_Forest_Suburban_21_loc_05 09/28/2021" = "5",
  "GB_Forest_GosforthReserve_22_loc_06 10/07/2022" = "6",
  "GB_Forest_GosforthReserve_23_loc_06" = "6",
  "UK_Forest_Suburban_21_loc_06 09/29/2021" = "6",
  "GB_Forest_GosforthReserve_22_loc_07 09/27/2022" = "7",
  "GB_Forest_GosforthReserve_23_loc_07" = "7",
  "GB_Forest_GosforthReserve_22_loc_07 10/30/2022" = "7",
  "UK_Forest_Suburban_21_loc_07 09/29/2021" = "7",
  "GB_Forest_GosforthReserve_22_loc_08 09/30/2022" = "8",
  "GB_Forest_GosforthReserve_23_loc_08" = "8",
  "UK_Forest_Suburban_21_loc_08 09/30/2021" = "8",
  "GB_Forest_GosforthReserve_22_loc_09 09/27/2022" = "9",
  "GB_Forest_GosforthReserve_23_loc_09" = "9",
  "UK_Forest_Suburban_21_loc_09 09/29/2021" = "9",
  "GB_Forest_GosforthReserve_22_loc_10 09/29/2022" = "10",
  "GB_Forest_GosforthReserve_23_loc_10" = "10",
  "UK_Forest_Suburban_21_loc_10 09/29/2021" = "10",
  "GB_Forest_GosforthReserve_22_loc_11 09/29/2022" = "11",
  "UK_Forest_Suburban_21_loc_11 09/29/2021" = "11" ,
  "GB_Forest_GosforthReserve_23_loc_11" = "11",
  "GB_Forest_GosforthReserve_22_loc_12 09/27/2022" = "12",
  "GB_Forest_GosforthReserve_23_loc_12" = "12",
  "UK_Forest_Suburban_21_loc_12 09/29/2021" = "12",
  "GB_Forest_GosforthReserve_22_loc_14 09/27/2022" = "14",
  "GB_Forest_GosforthReserve_23_loc_14" = "14",
  "UK_Forest_Suburban_21_loc_14 10/01/2021" = "14",
  "GB_Forest_GosforthReserve_22_loc_15 09/29/2022" = "15",
  "GB_Forest_GosforthReserve_23_loc_15" = "15",
  "UK_Forest_Suburban_21_loc_15 10/01/2021" = "15",
  "GB_Forest_GosforthReserve_22_loc_16 09/30/2022" = "16",
  "GB_Forest_GosforthReserve_23_loc_16" = "16",
  "UK_Forest_Suburban_21_loc_16 01/10/2021" = "16",
  "GB_Forest_GosforthReserve_22_loc_17 09/29/2022" = "17",
  "GB_Forest_GosforthReserve_23_loc_17" = "17",
  "UK_Forest_Suburban_21_loc_17 09/30/2021" = "17",
  "GB_Forest_GosforthReserve_22_loc_18 09/30/2022" = "18",
  "GB_Forest_GosforthReserve_23_loc_18" = "18",
  "GB_Forest_GosforthReserve_22_loc_19 09/29/2022" = "19"
)

# Adding Camera_Site column based on deployment ID mappings
TFreqPlot <- TFreqPlot %>%
  mutate(Camera_Site = case_when(
    deployment_id %in% names(CameraNumber) ~ CameraNumber[deployment_id],
    TRUE ~ NA_character_
  ))

# Ordering numeric 
TFreqPlot <- TFreqPlot %>%
  mutate(Camera_Site = as.numeric(Camera_Site)) %>%
  arrange(Camera_Site)

# Ordering species
species_order <- c("European Roe Deer", "Eurasian Badger", "Red Fox")
TFreqPlot$common_name <- factor(TFreqPlot$common_name, levels = species_order)

# Plotting Frequency (y) and Camera Site (x)
ggplot(TFreqPlot, aes(x = as.factor(Camera_Site), y = n, fill = common_name)) +
  geom_bar(stat = "identity", position = position_stack(), width = bar_width, color = NA) +
  scale_fill_manual(values = c("European Roe Deer" = "gray20", "Eurasian Badger" = "gray50", "Red Fox" = "gray80")) +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.background = element_blank(),
    axis.line.y = element_line(color = "black", linewidth = 0.3),
    axis.line.x = element_line(color = "black", linewidth = 0.3),
    axis.ticks.y = element_line(color = "black", linewidth = 0.3),
    axis.text.y = element_text(color = "black"),
    axis.ticks.x = element_line(color = "black", linewidth = 0.3),
    axis.title.x = element_text(color = "black"),
    axis.title.y = element_text(color = "black"),
    legend.position = "bottom", legend.justification = "centre", legend.direction = "horizontal", legend.key.width = unit(0.65, "cm"), legend.key.height = unit(0.35, "cm")) +
  scale_y_continuous(n.breaks = 12, expand = c(0, 0)) +
  labs(x = "Camera site", y = "Frequency (N = 1,622)", title = "") +
  guides(fill = guide_legend(title = NULL)) +
  scale_x_discrete(labels = custom_labels)+
  facet_wrap(~common_name)

# 1.8 - Spatial Distribution. Creating a proportional symbol map for European Roe Deer, Eurasian Badger and Red Fox
# Install leaflet package to create spatial distribution map.
install.packages("leaflet")
library(leaflet)

SDTotaldata <- Totaldata %>%
  dplyr::select(common_name, latitude, longitude) %>%
  filter(common_name %in% c("European Roe Deer", "Eurasian Badger", "Red Fox")) %>%
  group_by(common_name, latitude, longitude) %>%
  summarise(size = n())

# Define species colours using hexadecimal codes
EBcolour <- "#0000FF"  # Blue
RFcolour <- "#FF0000"  # Red
RDcolour <- "#000000"  # Black

# Adding diminutive noise to latitude and longitude
SDTotaldata$latitude <- SDTotaldata$latitude + runif(nrow(SDTotaldata), min = -0.0000000001, max = 0.0000000001)
SDTotaldata$longitude <- SDTotaldata$longitude + runif(nrow(SDTotaldata), min = -0.0000000001, max = 0.0000000001)

# Scale circle size based on size
SDTotaldata$size <- 3 * sqrt(SDTotaldata$size)

# Creating map
SDmap <- leaflet() %>%
  addProviderTiles(providers$OpenStreetMap) %>%
  addCircleMarkers(
    data = SDTotaldata[SDTotaldata$common_name == "Eurasian Badger", ],
    lng = ~longitude,
    lat = ~latitude,
    radius = ~size,
    fillColor = EBcolour,
    fillOpacity = 0.5,
    weight = 0.2,
    group = "Eurasian Badger"
  ) %>%
  addCircleMarkers(
    data = SDTotaldata[SDTotaldata$common_name == "European Roe Deer", ],
    lng = ~longitude,
    lat = ~latitude,
    radius = ~size,
    fillColor = RDcolour,
    fillOpacity = 0.5,
    weight = 0.2,
    group = "European Roe Deer"
  ) %>%
  addCircleMarkers(
    data = SDTotaldata[SDTotaldata$common_name == "Red Fox", ],
    lng = ~longitude,
    lat = ~latitude,
    radius = ~size,
    fillColor = RFcolour,
    fillOpacity = 0.5,
    weight = 0.2,
    group = "Red Fox"
  ) %>%
  addLayersControl(overlayGroups = c("European Roe Deer", "Red Fox", "Eurasian Badger"),
                   options = layersControlOptions(collapsed = FALSE))

# Print the map
print(SDmap)

# 1.9 - Statistical analysis of spatial distribution.
anova_result4 <- aov(size ~ common_name, data = SDTotaldata)
summary(anova_result4)
print (anova_result4)

# Significance level
alpha <- 0.05

# Degrees of freedom for the numerator (df1) and denominator (df2)
df3 <- 2
df4 <- 95

# Calculate critical value
critical_value4 <- qf(1 - alpha, df3, df4)
print(critical_value4)
